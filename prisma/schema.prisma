// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER
  ADMIN
  NORMAL
}

model Account {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  role      Role     @default(NORMAL)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  profile   Profile?

  @@map("accounts")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  accountId Int      @unique @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  boards    Board[]
  Pin       Pin[]

  @@map("profiles")
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  // PROFILE CANNOT BE NULL - because board would be deleted when user account and profile is deleted
  profileId Int      @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // implicit
  // pins Pin[]

  // explicit 
  boardPins BoardPin[]

  @@map("boards")
}

model Pin {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  image     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  // PROFILE CAN BE NULL - because pins often save in other accounts' board so we cannot just remove pin
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)

  // implicit
  // boards Board[]

  // explicit 
  boardPins BoardPin[]

  @@map("pins")
}

model BoardPin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // explicit - boards
  boardId Int   @map("board_id")
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  // explicit - pins
  pinId Int @map("pin_id")
  pin   Pin @relation(fields: [pinId], references: [id], onDelete: Cascade)

  @@map("board_pins")
}
